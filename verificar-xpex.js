const cardapioService = require('./src/services/cardapioService');

async function verificarXpex() {
  try {
    console.log('=== VERIFICANDO XPEX ===');
    
    // Inicializar o servi√ßo
    await cardapioService.init();
    console.log('‚úÖ CardapioService inicializado');
    
    // Buscar todos os itens
    const itens = cardapioService.getItems();
    console.log(`üìã Total de itens no card√°pio: ${itens.length}`);
    
    // Buscar todos os mapeamentos
    const mappings = cardapioService.getMappings();
    const mappingKeys = Object.keys(mappings);
    console.log(`üìù Total de mapeamentos: ${mappingKeys.length}`);
    
    // Verificar se existe mapeamento para 'xpex'
    console.log('\nüîç Verificando mapeamento para "xpex":');
    const xpexItemId = mappings['xpex'];
    
    if (xpexItemId) {
      console.log(`‚úÖ Mapeamento encontrado: "xpex" -> Item ID: ${xpexItemId}`);
      
      // Buscar o item correspondente
      const item = itens.find(i => i.id === xpexItemId);
      if (item) {
        console.log(`üì¶ Item encontrado:`);
        console.log(`   - ID: ${item.id}`);
        console.log(`   - Nome: "${item.nome}"`);
        console.log(`   - Descri√ß√£o: "${item.descricao}"`);
        console.log(`   - Pre√ßo: R$ ${item.preco}`);
        console.log(`   - Tipo: ${item.tipo}`);
      } else {
        console.log(`‚ùå PROBLEMA: Item com ID ${xpexItemId} n√£o encontrado no card√°pio!`);
      }
    } else {
      console.log('‚ùå Mapeamento "xpex" n√£o encontrado');
    }
    
    // Procurar por itens que podem ser relacionados a 'xpex'
    console.log('\nüîç Procurando itens similares a "xpex":');
    const itensSimilares = itens.filter(item => 
      item.nome && (
        item.nome.toLowerCase().includes('x') ||
        item.nome.toLowerCase().includes('pex') ||
        item.nome.toLowerCase().includes('fish') ||
        item.nome.toLowerCase().includes('frango')
      )
    );
    
    if (itensSimilares.length > 0) {
      console.log('üìã Itens similares encontrados:');
      itensSimilares.forEach(item => {
        console.log(`   - ID: ${item.id}, Nome: "${item.nome}", Tipo: ${item.tipo}, Pre√ßo: R$ ${item.preco}`);
      });
    } else {
      console.log('‚ùå Nenhum item similar encontrado');
    }
    
    // Procurar por mapeamentos que contenham 'x' ou 'pex'
    console.log('\nüîç Procurando mapeamentos similares:');
    const mapeamentosSimilares = mappingKeys.filter(key => 
      key.includes('x') || key.includes('pex') || key.includes('fish')
    );
    
    if (mapeamentosSimilares.length > 0) {
      console.log('üìù Mapeamentos similares encontrados:');
      mapeamentosSimilares.slice(0, 10).forEach(key => {
        const itemId = mappings[key];
        const item = itens.find(i => i.id === itemId);
        console.log(`   - "${key}" -> ID ${itemId}: ${item ? item.nome : 'Item n√£o encontrado'}`);
      });
      
      if (mapeamentosSimilares.length > 10) {
        console.log(`   ... e mais ${mapeamentosSimilares.length - 10} mapeamentos`);
      }
    } else {
      console.log('‚ùå Nenhum mapeamento similar encontrado');
    }
    
    // Testar normaliza√ß√£o
    console.log('\nüß™ Testando normaliza√ß√£o de "xpex":');
    const normalize = (s) => String(s || '')
      .toLowerCase()
      .normalize('NFD')
      .replace(/[\u0300-\u036f]/g, '') // remove diacr√≠ticos
      .replace(/[^\w\s]/g, ' ') // substitui pontua√ß√£o por espa√ßo
      .replace(/\s+/g, ' ')
      .trim();
    
    const xpexNormalizado = normalize('xpex');
    console.log(`   - "xpex" normalizado: "${xpexNormalizado}"`);
    
    const xpexMapeamentoNormalizado = mappings[xpexNormalizado];
    if (xpexMapeamentoNormalizado) {
      console.log(`‚úÖ Mapeamento normalizado encontrado: "${xpexNormalizado}" -> ID ${xpexMapeamentoNormalizado}`);
    } else {
      console.log(`‚ùå Mapeamento normalizado n√£o encontrado`);
    }
    
    console.log('\n=== DIAGN√ìSTICO ===');
    if (!xpexItemId) {
      console.log('‚ùå PROBLEMA PRINCIPAL: Mapeamento "xpex" n√£o existe');
      console.log('üí° SOLU√á√ïES POSS√çVEIS:');
      console.log('   1. Verificar se existe um item no card√°pio que deveria ser mapeado para "xpex"');
      console.log('   2. Adicionar o mapeamento manualmente usando cardapioService.addMapping("xpex", itemId)');
      console.log('   3. Verificar se o item foi removido ou se o ID mudou');
    } else {
      const item = itens.find(i => i.id === xpexItemId);
      if (!item) {
        console.log('‚ùå PROBLEMA: Mapeamento existe mas item n√£o foi encontrado');
        console.log('üí° SOLU√á√ÉO: Verificar integridade do banco de dados');
      } else {
        console.log('‚úÖ Mapeamento e item existem - problema pode estar no cache ou processamento');
        console.log('üí° SOLU√á√ïES:');
        console.log('   1. Aguardar 30 segundos para o cache atualizar');
        console.log('   2. Reiniciar o bot');
        console.log('   3. Verificar se a palavra est√° sendo processada corretamente');
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar xpex:', error);
  }
}

verificarXpex();