const cardapioService = require('./src/services/cardapioService');

async function testeSimples() {
  try {
    console.log('=== TESTE SIMPLES X-MEGA ===');
    
    // Inicializar o servi√ßo
    await cardapioService.init();
    console.log('‚úÖ CardapioService inicializado');
    
    // Verificar se o item existe
    const itens = cardapioService.getItems();
    const itemXMega = itens.find(item => 
      item.nome && item.nome.toLowerCase().includes('mega')
    );
    
    console.log('\nüîç Status do X-Mega:');
    if (itemXMega) {
      console.log(`‚úÖ Item encontrado:`);
      console.log(`   - ID: ${itemXMega.id}`);
      console.log(`   - Nome: "${itemXMega.nome}"`);
      console.log(`   - Pre√ßo: R$ ${itemXMega.preco}`);
      console.log(`   - Tipo: ${itemXMega.tipo}`);
    } else {
      console.log('‚ùå Item X-Mega n√£o encontrado');
      return;
    }
    
    // Verificar mapeamentos
    const mappings = cardapioService.getMappings();
    const testWords = ['x-mega', 'xmega', 'mega', 'x mega'];
    
    console.log('\nüîó Status dos mapeamentos:');
    let mapeamentosCorretos = 0;
    
    for (const word of testWords) {
      const itemId = mappings[word.toLowerCase()];
      if (itemId === itemXMega.id) {
        console.log(`‚úÖ "${word}" -> ID ${itemId} (correto)`);
        mapeamentosCorretos++;
      } else if (itemId) {
        console.log(`‚ö†Ô∏è  "${word}" -> ID ${itemId} (incorreto, deveria ser ${itemXMega.id})`);
      } else {
        console.log(`‚ùå "${word}" -> n√£o mapeado`);
      }
    }
    
    console.log(`\nüìä Resumo: ${mapeamentosCorretos}/${testWords.length} mapeamentos corretos`);
    
    // Teste de busca direta
    console.log('\nüîç Teste de busca direta:');
    
    // Simular busca como o sistema faria
    function buscarItemPorPalavra(palavra) {
      const palavraLimpa = palavra.toLowerCase().trim();
      const itemId = mappings[palavraLimpa];
      
      if (itemId) {
        const item = itens.find(i => i.id === itemId);
        return item;
      }
      
      return null;
    }
    
    for (const word of testWords) {
      const itemEncontrado = buscarItemPorPalavra(word);
      if (itemEncontrado) {
        console.log(`‚úÖ "${word}" encontrou: ${itemEncontrado.nome} (ID: ${itemEncontrado.id})`);
      } else {
        console.log(`‚ùå "${word}" n√£o encontrou nenhum item`);
      }
    }
    
    // Diagn√≥stico final
    console.log('\n=== DIAGN√ìSTICO FINAL ===');
    
    if (itemXMega && mapeamentosCorretos === testWords.length) {
      console.log('üéâ TUDO FUNCIONANDO!');
      console.log('‚úÖ Item X-Mega existe no card√°pio');
      console.log('‚úÖ Todos os mapeamentos est√£o corretos');
      console.log('üí° O cliente pode pedir usando: x-mega, xmega, mega, x mega');
      console.log('‚ö†Ô∏è  Se ainda n√£o funciona no WhatsApp, aguarde 30 segundos ou reinicie o bot');
    } else {
      console.log('‚ùå AINDA H√Å PROBLEMAS:');
      if (!itemXMega) {
        console.log('   - Item X-Mega n√£o existe no card√°pio');
      }
      if (mapeamentosCorretos < testWords.length) {
        console.log(`   - Apenas ${mapeamentosCorretos}/${testWords.length} mapeamentos est√£o corretos`);
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
  }
}

testeSimples();